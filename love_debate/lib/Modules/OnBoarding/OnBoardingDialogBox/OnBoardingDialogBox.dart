import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:lovedebate/Models/OnBoardingModel.dart';
import 'package:lovedebate/Modules/LoginSignup/Login.dart';
import 'package:lovedebate/Modules/OnBoarding/OnBoardingDialogBox/OnBoardingModels/CheckBoxDataModel.dart';
import 'package:lovedebate/Utils/Constants/WebService.dart';
import 'package:lovedebate/Utils/Controllers/ApiBaseHelper.dart';
import 'package:lovedebate/Utils/Designables/Toast.dart';
import 'package:lovedebate/Utils/Globals/Colors.dart';
import 'package:lovedebate/Utils/Globals/Fonts.dart';
import 'package:lovedebate/Widgets/CustomButtons.dart';
import 'package:lovedebate/Utils/Controllers/AppExceptions.dart';


var qOptions;

class OnBoardingDialogBox extends StatefulWidget {


  Success Question;
  TextEditingController txtAnswerController = TextEditingController();

  OnBoardingDialogBox({this.Question,this.txtAnswerController});

  @override
  _OnBoardingDialogBoxState createState() => _OnBoardingDialogBoxState();
}

class _OnBoardingDialogBoxState extends State<OnBoardingDialogBox> {


  List<CheckBoxDataModel> questionsCheckBox = List<CheckBoxDataModel>();

  bool _value1 = false;
  bool _value2 = false;

  String Key="MyKey";

  //we omitted the brackets '{}' and are using fat arrow '=>' instead, this is dart syntax
  void _value1Changed(bool value) => setState(() => _value1 = value);
  void _value2Changed(bool value) => setState(() => _value2 = value);

  int apiCall = 0;

 String DialogApi=WebService.baseURL;

  double _itemcount=5;

  @override
  void dispose() {
    super.dispose();
    this.dispose();
  }

  @override
  void initState() {
    super.initState();

    int apiCall = 0;
    print(widget.Question.qaOptions);
//
  if (widget.Question.qaId !=null){
     qOptions = Autogenerated.fromJson(json.decode('{"MyKey" : ${widget.Question.qaOptions}}'));
    print(qOptions.myKey.length);
  }
  for(int i=0;i<qOptions.myKey.length;i++)
    {
      var itm = CheckBoxDataModel(id: widget.Question.qaId,checkboxText: qOptions.myKey[i].text,checkvalue: false,value: qOptions.myKey[i].value);
      questionsCheckBox.add(itm);
    }

  print(questionsCheckBox.length);

    if(qOptions.myKey.first.text=="api"){
      DialogApi=qOptions.myKey.first.value;
      callOnBoardingSubOptions(DialogApi);
    }
  }


  @override
  Widget build(BuildContext context) {

    var totalDialogWidth = (MediaQuery.of(context).size.width - 20)/2.2;
    // var centerBoxWidth = (MediaQuery.of(context).size.width - 80)/ 2.2;
    var totalHeight = totalDialogWidth + 121;

    TextEditingController passwordController = new TextEditingController();

    var width=MediaQuery.of(context).size.width;
    return Dialog(
      shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(Radius.circular(22.5))
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: <Widget>[
         // OnBoardingSlider(width),
         // OnBoardingCheckBox(),
          OnBoardingDropDownList(totalDialogWidth,width,widget.Question,qOptions as Autogenerated,questionsCheckBox),

        ],
      ),
    );
  }
  Container OnBoardingDropDownList(double totalDialogWidth ,double width,Success Question,Autogenerated opt,List<CheckBoxDataModel> questionsCheckBox) {
    return Container(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            SizedBox(height: 16,),
            Text("Select the Option",style: TextStyle(fontSize: GlobalFont.textFontSize),),
            SizedBox(height: 16,),
            Container(
              //height:((opt.myKey.length)+1.toDouble())*60,
              height: (((questionsCheckBox.length)+1).toDouble())*60,
              child: ListView.builder(
               itemCount: (questionsCheckBox.length),
                 //itemCount:((opt.myKey.length)),
                  itemBuilder: (BuildContext context,int index,){
                   String itm = opt.myKey[index].text.toString();
                    return OnBoardingCheckBox(itm,totalDialogWidth,questionsCheckBox,index);
                  }),
            ),
            Container(
              //height: 100,
              width: width,
              //color: Colors.blue,
              margin: EdgeInsets.all(16),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                //crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  Expanded(child: OnBoardingDialogBoxBtn("Cancel",Colors.grey,Colors.black)),
                  SizedBox(width: 16,),
                  Expanded(child: OnBoardingDialogBoxBtn("Done",GlobalColors.firstColor,Colors.white)),
                ],
              ),
            )
          ],
        ),
        );
  }

  Container OnBoardingCheckBox(String opt,double width,List<CheckBoxDataModel> questionsCheckBox,int index) {
    return Container(
            height: 60,
           // color: Colors.blue,
            margin: EdgeInsets.all(8),
            child: Row(
              children: <Widget>[
                //SizedBox(width: 16,),
                new Checkbox(
                  value:questionsCheckBox[index].checkvalue ,
                  //onChanged: _value1Changed,
                  onChanged: (checkBoxValue){
                    setState(() {

                      if (widget.Question.qaFieldType == "Dropdown"){
                        if(questionsCheckBox[index].checkvalue==false){
//                        questionsCheckBox[index].checkvalue=true;
                          for (int i =0; i<questionsCheckBox.length; i++){
                            if(i == index) {
                              questionsCheckBox[i].checkvalue=true;
                            }else{
                              questionsCheckBox[i].checkvalue=false;
                            }

                          }
                        }
                        else{
                          questionsCheckBox[index].checkvalue=false;
                        }
                      }else if (widget.Question.qaFieldType == "Checkbox"){
                          if(questionsCheckBox[index].checkvalue==false) {
                            questionsCheckBox[index].checkvalue = true;
                          }else {
                            questionsCheckBox[index].checkvalue = false;
                          }
                      }

                    });
                  },
                  checkColor: GlobalColors.secondColor,
                  activeColor: GlobalColors.firstColor,),
                SizedBox(width: 16,),
                Expanded(
                  child: Container(
                      child: Text(questionsCheckBox[index].checkboxText,style: TextStyle(fontSize: GlobalFont.textFontSize),overflow: TextOverflow.ellipsis,maxLines: 5,)),
                )
              ],
            ),
          );
  }

  Widget OnBoardingDialogBoxBtn(String text,Color color,Color textColor) {
    return SizedBox(
      height: 45,
      //width: width,
      child: CustomRaisedButton(
        buttonText: text,
        cornerRadius: 22.5,
        textColor: textColor,
        backgroundColor:color,
        borderWith: 0,
        action: (){
          setState(() {
            String selectedResults=" ";
            questionsCheckBox.forEach((f){
              if(f.checkvalue==true){
               selectedResults=selectedResults+","+f.checkboxText;

              }
            });
            if(text=="Done"){
              Navigator.pop(context, selectedResults,);
            }
            else if(text=="Cancel"){
              Navigator.pop(context," ");
            }

          });
//
        },
      ),
    );
  }


  callOnBoardingSubOptions(String webserviceUrl) {
    Map<String, dynamic> body = {
    };
    try {
      ApiBaseHelper().fetchService(method: HttpMethod.get, url: webserviceUrl,body: body,isFormData: true).then(
              (response) {
            var data = List<QaOptions>();
            if (response.statusCode == 200){
              Map<String, dynamic> responseJson = json.decode(response.body);
              if(responseJson.containsKey('success')) {
                responseJson['success'].forEach((v){
                  print(v["pro_name"]);
                  print(v[0]);
                  var itm = QaOptions(text: v['pro_name'], value: v['pro_'] );
                  print(itm);
                  data.add(itm);
                  for(int i=0;i<responseJson.values.length;i++) {
                    var itm = CheckBoxDataModel(id: widget.Question.qaId,checkboxText: data[i].text,checkvalue: false,value: data[i].value);
                    questionsCheckBox.add(itm);
                  }
                  print(questionsCheckBox);
                });
                setState(() {
                  //_Questions=data;

                 // if(qOptions.myKey.first.text=="api"){
//                  for(int i=0;i<qOptions.myKey.length;i++) {
//                    var itm = CheckBoxDataModel(id: widget.Question.qaId,checkboxText: data[i].text,checkvalue: false,value: data[i].value);
//                    questionsCheckBox.add(itm);
//                  }
                 // }
                  apiCall=0;
                });
              } else{
                print("Oh no response");
              }
            }else if (response.statusCode == 401){
              Toast.show(response.reasonPhrase.toString(), context, duration: Toast.LENGTH_LONG);
            }else{
              Toast.show(response.reasonPhrase.toString(), context, duration: Toast.LENGTH_LONG);
            }
          });

    } on FetchDataException catch(e) {
      setState(() {

      });
    }
  }
}

class Autogenerated {
  List<MyKey> myKey;

  Autogenerated({this.myKey});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['MyKey'] != null) {
      myKey = new List<MyKey>();
      json['MyKey'].forEach((v) {
        myKey.add(new MyKey.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.myKey != null) {
      data['MyKey'] = this.myKey.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class MyKey {
  String text;
  String value;

  MyKey({this.text, this.value});

  MyKey.fromJson(Map<String, dynamic> json) {
    text = json['text'];
    value = json['value'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['text'] = this.text;
    data['value'] = this.value;
    return data;
  }
}


//DropdownButton(
//            hint: Text('Please choose a location'), // Not necessary for Option 1
//            value: _selectedLocation,
//            onChanged: (newValue) {
//              setState(() {
//                _selectedLocation = newValue;
//              });
//            },
//            items: _locations.map((location) {
//              return DropdownMenuItem(
//                child: new Text(location),
//                value: location,
//              );
//            }).toList(),
//          ),
