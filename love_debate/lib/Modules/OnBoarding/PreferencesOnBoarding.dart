import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:lovedebate/Models/AnswersModel.dart';
import 'package:lovedebate/Models/OnBoardingModel.dart';
import 'package:lovedebate/Models/QaOptions.dart';
import 'package:lovedebate/Modules/OnBoarding/OnBoardingDialogBox/OnBoardingDialogBox.dart';
import 'package:lovedebate/Utils/Constants/WebService.dart';
import 'package:lovedebate/Utils/Controllers/ApiBaseHelper.dart';
import 'package:lovedebate/Utils/Controllers/Loader.dart';
import 'package:lovedebate/Utils/Designables/Toast.dart';
import 'package:lovedebate/Utils/Globals/AnswersGlobals.dart';
import 'package:lovedebate/Utils/Globals/Colors.dart';
import 'package:lovedebate/Utils/Globals/CustomAppBar.dart';
import 'package:lovedebate/Utils/Globals/Fonts.dart';
import 'package:lovedebate/Utils/Controllers/AppExceptions.dart';
import 'OnBoardingModels/CheckBoxDataModel.dart';


var qOptions;

class PreferencesOnBoarding extends StatefulWidget {
  @override
  _PreferencesOnBoardingState createState() => _PreferencesOnBoardingState();
}

class _PreferencesOnBoardingState extends State<PreferencesOnBoarding> {

  ///additionals
  ///
  ///
  List<CheckBoxDataModel> questionsCheckBox = List<CheckBoxDataModel>();
  List<CheckBoxDataModel> apiQuestionsCheckBox = List<CheckBoxDataModel>();

///ends

  int apiCall = 0;
  List<Success> _Questions = List<Success>();

  String answer=" ";

  double _value = 0.0;
  void _setvalue(double value) => setState(() => _value = value);

  int _questionType=0;
  FocusNode _focusNode = new FocusNode();

  TextEditingController txtAnswerController = TextEditingController();

  FocusNode txtEmailFocusNode = FocusNode();

  @override
  void initState() {
    super.initState();
    callOnBoardingQuestions();
    apiCall=1;
    AnswersGlobal.answers.clear();
    AnswersGlobal.questionIndex = -1;
  }


  @override
  Widget build(BuildContext context) {

    double _height=(MediaQuery.of(context).size.height)-AppBar().preferredSize.height;
    double _width=MediaQuery.of(context).size.width;
//    String ans = "";

    return Scaffold(
      appBar: CustomAppbar.setNavigation("Preferences"),
      body: SafeArea(
      child: (apiCall==0)?Padding(
        padding: const EdgeInsets.all(4.0),
        child: ListView.builder(
          itemCount: _Questions.length,
          itemBuilder: (context, index){
            return PreferenceQuestion(
                ques: _Questions[index],
              ans: "Answer",
              action: (){
//
//                for(int i = 0; i<AnswersGlobal.answers.length; i++){
//                  if (AnswersGlobal.answers[i].qId == _Questions[index].qaId){
//                    ans = AnswersGlobal.answers[i].answers[0];
//                  }else{
//                    ans = "Answer";
//                  }
//                }
                if (_Questions[index].qaSlug == "address"){
                  print("Use places instead");
                }else{

                  if (_Questions[index].qaId !=null){
                    qOptions = Autogenerated.fromJson(json.decode('{"MyKey" : ${_Questions[index].qaOptions}}'));
                  }
                  questionsCheckBox.clear();
                  for(int i=0;i<qOptions.myKey.length;i++) {
                    var itm = CheckBoxDataModel(id: _Questions[index].qaId,checkboxText: qOptions.myKey[i].text,checkvalue: false,value: qOptions.myKey[i].value);
                    questionsCheckBox.add(itm);
                  }
                  if(qOptions.myKey.first.text=="api"){
                    var dialogApi=qOptions.myKey.first.value;
                    print(dialogApi);
                    callOnBoardingSubOptions(dialogApi, _Questions[index]);
                    setState(() {
                      apiCall = 1;
                    });
                  }else{

                    showDialog(
                        barrierDismissible: false,
                        context: context,
                        builder: (context) {
                          AnswersGlobal.questionIndex = index;
                          return OnBoardingDialogBox(Question: _Questions[index],questionsCheckBox: questionsCheckBox,);
                        }
                    ).then((value){
//                      setState(() {
//                        for(int i = 0; i<AnswersGlobal.answers.length; i++){
//                          if (AnswersGlobal.answers[i].qId == _Questions[index].qaId){
//                            _Questions[index].qaAns = AnswersGlobal.answers[i].answers[0];
//                          }else{
//                            _Questions[index].qaAns = "Answer";
//                          }
//                        }
////                        _Questions[index].qaAns = AnswersGlobal.answers
//                      });
                    });
                  }
                }
              },
            );
//           return QuestionsContainer(_height, _width, txtEmailFocusNode, txtAnswerController, context,_Questions[index].qaQuestion,_questionType,_Questions[index].qaFieldType,_Questions[index],);
           },
        ),
      ):Center(child: Loading(),),
    ),

    );
  }

  Card QuestionsContainer(double _height, double _width, FocusNode txtEmailFocusNode, TextEditingController txtAnswerController, BuildContext context,String questiontext,int _questionType,String fieldtype,Success QuestionObj,) {
    return Card(
      margin: const EdgeInsets.all(8),
      elevation:  5,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: <Widget>[

          Container(
            width: _width,
            margin: EdgeInsets.all(24),
              child: Text(questiontext,style: TextStyle(
                  fontSize: GlobalFont.textFontSize,
                  fontWeight: FontWeight.bold,
                  color: Colors.black),
                textAlign: TextAlign.justify,
              )
          ),
          (fieldtype!="Slider")?Container(
           // height: 120,
            margin: EdgeInsets.all(4),
            child: Container(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  AnswerContainer(_width,"Enter Required value",QuestionObj)
//                  (fieldtype=="Dropdown"||fieldtype=="Checkbox")? AnswerContainer(_width,"Enter Required value",QuestionObj):
//                  Padding(
//                    padding: const EdgeInsets.all(16),
//                    child: NumberTextFeildContainer(txtAnswerController, fieldtype, context, QuestionObj),
//                  ),
                ],
              ),
            ),
          ):OnBoardingSlider(_width),
        ],
      ),
    );
  }

  InkWell AnswerContainer(double _width,String answerText,Success QuestionObj,) {
    return InkWell(
      onTap: (){
        setState(() {
          if (QuestionObj.qaId !=null){
            qOptions = Autogenerated.fromJson(json.decode('{"MyKey" : ${QuestionObj.qaOptions}}'));
            print(qOptions.myKey.length);
          }
          for(int i=0;i<qOptions.myKey.length;i++)
          {
            var itm = CheckBoxDataModel(id: QuestionObj.qaId,checkboxText: qOptions.myKey[i].text,checkvalue: false,value: qOptions.myKey[i].value);
            questionsCheckBox.add(itm);
          }
          if(qOptions.myKey.first.text=="api"){
//            =qOptions.myKey.first.value;
            callOnBoardingSubOptions(qOptions.myKey.first.value, QuestionObj);
          }
//          questionOptionsLenght=questionsCheckBox.length;


          showDialog(
              barrierDismissible: false,
              context: context,
              builder: (BuildContext context) {
                return OnBoardingDialogBox(Question: QuestionObj);
              }
          ).then((value){
            setState(() {
              answer=value;
            });

          });

        });
      }, child:
    //   Row(
    //      children: <Widget>[
    Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        Container(
          margin: EdgeInsets.only(bottom: 8, left: 8),
          child: Text((answer==" ")?answerText:answer,
            style: TextStyle(
                  fontSize: GlobalFont.textFontSize,
                  color: Colors.grey,
                ),
            textAlign: TextAlign.justify,
            overflow: TextOverflow.ellipsis,maxLines: 2,),

        ),
        SizedBox(height: 8,),
        Container(height: 1,width:_width-54 ,color:Colors.grey,),
        SizedBox(height: 16,),
      ],
    ),
      //       SizedBox(width:8,),
      //       ],
      //       ),
    );
  }
  Container OnBoardingSlider(double width) {
    return Container(
      height: 75,
      width: width,
      child: Column(
        children: <Widget>[
          Slider(value: _value, onChanged: _setvalue,activeColor: GlobalColors.firstColor,),
          Text(
            'Value: ${(_value * 100).round()}',
            style: TextStyle(
              fontSize: GlobalFont.textFontSize,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  ///API's Calling
  callOnBoardingQuestions() {
    Map<String, dynamic> body = {

    };
    try {
      ApiBaseHelper().fetchService(method: HttpMethod.get, url: WebService.onboardingApi,body: body,isFormData: true).then(
              (response) {

            var data = List<Success>();
            if (response.statusCode == 200){
              Map<String, dynamic> responseJson = json.decode(response.body);
              if(responseJson.containsKey('success')) {
                responseJson['success'].forEach((v) {
                  data.add(Success.fromJson(v));
                });
                setState(() {
                  _Questions=data;
                  apiCall=0;
                });
              } else{
                print("Oh no response");
              }

            }else if (response.statusCode == 401){
              Toast.show(response.reasonPhrase.toString(), context, duration: Toast.LENGTH_LONG);
            }else{
              Toast.show(response.reasonPhrase.toString(), context, duration: Toast.LENGTH_LONG);
            }
          });

    } on FetchDataException catch(e) {
      setState(() {

      });
    }
  }
  ///additional
  callOnBoardingSubOptions(String webserviceUrl, Success question) {
    Map<String, dynamic> body = {
    };
    try {
      ApiBaseHelper().fetchService(method: HttpMethod.get, url: webserviceUrl,body: body,isFormData: true).then(
              (response) {
            var data = List<QaOptions>();
            if (response.statusCode == 200){
              print(webserviceUrl);
              Map<String, dynamic> responseJson = json.decode(response.body);
              if(responseJson.containsKey('success')) {

                switch (webserviceUrl){
                  case "data/professions":
                    responseJson['success'].forEach((v){
                      var itm = QaOptions(text: v['pro_name'], value: '${v['pro_id']}' );
                      data.add(itm);
                    });
                    print(webserviceUrl);
                    break;
                  case "data/children_preferences":
                    responseJson['success'].forEach((v){
                      var itm = QaOptions(text: v['cp_text'], value: '${v['cp_id']}' );
                      data.add(itm);
                    });
                    print(webserviceUrl);
                    break;
                  case "data/faith":
                    responseJson['success'].forEach((v){
                      var itm = QaOptions(text: v['f_name'], value: '${v['f_id']}' );
                      data.add(itm);
                    });
                    print(webserviceUrl);
                    break;
                  case "data/ethnicity":
                    responseJson['success'].forEach((v){
                      var itm = QaOptions(text: v['e_name'], value: '${v['e_id']}' );
                      data.add(itm);
                    });
                    print(webserviceUrl);
                    break;
                  case "data/vacation_types":
                    responseJson['success'].forEach((v){
                      var itm = QaOptions(text: v['uvt_type_id'], value: '${v['uvt_id']}' );
                      data.add(itm);
                    });
                    print(webserviceUrl);
                    break;
                  case "data/hobbies":
                    responseJson['success'].forEach((v){
                      var itm = QaOptions(text: v['hb_name'], value: '${v['hb_id']}' );
                      data.add(itm);
                    });
                    print(webserviceUrl);
                    break;
                  default:
                    print("Nothing found");
                }
                setState(() {
                  apiCall = 0;
                });
                questionsCheckBox.clear();
                for(int i=0;i<data.length;i++) {
                  var itm = CheckBoxDataModel(id: question.qaId,checkboxText: data[i].text,checkvalue: false,value: data[i].value);
                  print(itm.checkboxText);
                  questionsCheckBox.add(itm);
                }
                showDialog(
                    barrierDismissible: false,
                    context: context,
                    builder: (context) {
                      return OnBoardingDialogBox(Question: question,questionsCheckBox: questionsCheckBox,);
                    }
                ).then((value){});
              } else{
                print("Oh no response");
              }
            }else if (response.statusCode == 401){
              setState(() {
                apiCall = 0;
              });
              Toast.show(response.reasonPhrase.toString(), context, duration: Toast.LENGTH_LONG);
            }else{
              setState(() {
                apiCall = 0;
              });
              Toast.show(response.reasonPhrase.toString(), context, duration: Toast.LENGTH_LONG);
            }
          });
    } on FetchDataException catch(e) {
      setState(() {
      });
    }
  }
///
}






class PreferenceQuestion extends StatelessWidget {

  Success ques;
  VoidCallback action;
  String ans;
  PreferenceQuestion({this.ques, this.action, this.ans});




  @override
  Widget build(BuildContext context) {

    return InkWell(
      onTap: action,
      child: Container(
        height: 80,
        child: Card(
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Row(
              children: <Widget>[
//                Icon(Icons.accessibility_new, size: 40,color: Colors.black,),
                Expanded(
                  child: Text(ques.qaName,style: TextStyle(
                      fontSize: GlobalFont.textFontSize,
                      fontWeight: FontWeight.w500,
                      color: Colors.grey),
                    textAlign: TextAlign.left,
                  ),
                ),
                Text(
                  ans,
                  style: TextStyle(
                    fontSize: GlobalFont.textFontSize - 2,
                    color: Colors.grey),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
